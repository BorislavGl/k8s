---
apiVersion: "v1"
kind: "Namespace"
metadata:
  name: "kubernetes-plugin"
  labels:
    name: "kubernetes-plugin"

# jenkins

---
apiVersion: "apps/v1beta1"
kind: "StatefulSet"
metadata:
  name: "jenkins"
  labels:
    name: "jenkins"
spec:
  serviceName: "jenkins"
  replicas: 1
  template:
    metadata:
      name: "jenkins"
      labels:
        name: "jenkins"
    spec:
      terminationGracePeriodSeconds: 10
      serviceAccountName: jenkins
      containers:
        - name: "jenkins"
          image: "jenkinsci/jenkins:2.60.1"
          ports:
            - containerPort: 8080
            - containerPort: 50000
          resources:
            limits:
              cpu: 1
              memory: 1Gi
            requests:
              cpu: 0.5
              memory: 500Mi
          env:
            - name: JAVA_OPTS
              value: "-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:MaxRAMFraction=1 -Dhudson.slaves.NodeProvisioner.MARGIN=50 -Dhudson.slaves.NodeProvisioner.MARGIN0=0.85"
          volumeMounts:
            - mountPath: "/var/jenkins_home"
              name: "jenkins-home"
            - mountPath: "/var/run/docker.sock"
              name: "jenkins-sock"
          livenessProbe:
            httpGet:
              path: /login
              port: 8080
            initialDelaySeconds: 60
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /login
              port: 8080
            initialDelaySeconds: 60
            timeoutSeconds: 5
      volumes:
      - name: "jenkins-sock"
        hostPath:
          path: "/var/run/docker.sock"
      securityContext:
        fsGroup: 1000
  volumeClaimTemplates:
  - metadata:
      name: jenkins-home
      # annotations:
      #   volume.beta.kubernetes.io/storage-class: anything
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi

---
apiVersion: "v1"
kind: "Service"
metadata:
  name: "jenkins"
  annotations:
    # ensure the client ip is propagated to avoid the invalid crumb issue (k8s <1.7)
    # service.beta.kubernetes.io/external-traffic: OnlyLocal
spec:
  type: NodePort
  selector:
    name: "jenkins"
  # k8s 1.7+
  externalTrafficPolicy: Local
  ports:
    -
      name: "http"
      port: 80
      targetPort: 8080
      protocol: "TCP"
    -
      name: "slave"
      port: 50000
      protocol: "TCP"
